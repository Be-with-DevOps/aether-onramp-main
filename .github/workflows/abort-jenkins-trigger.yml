name: jenkins-trigger

on:
  workflow_dispatch:
    inputs:
      server_ip:
        description: 'The server IP address'
        required: true
        default: '10.176.27.188'
      port:
        description: "The port to deploy the application on 8080"
        required: true
        default: "8080"
      branch_name:
        description: 'Name of the Git branch to deploy from.'
        required: true
        default: 'main'
      smoke_test:
        description: 'Run Smoke_Test'
        required: true
        default: 'true'
        type: boolean
      sanity_test:
        description: 'Run Sanity_Test'
        required: true
        default: 'true'
        type: boolean

jobs:
  trigger_jenkins_job :
    runs-on: [self-hosted]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Environment Variables
        run: |
          echo "SERVER_IP=${{ github.event.inputs.server_ip }}" >> $GITHUB_ENV
          echo "PORT=${{ github.event.inputs.port }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${{ github.event.inputs.branch_name }}" >> $GITHUB_ENV
          echo "SMOKE_TEST=${{ github.event.inputs.smoke_test }}" >> $GITHUB_ENV
          echo "SANITY_TEST=${{ github.event.inputs.sanity_test }}" >> $GITHUB_ENV

      - name: Trigger Jenkins Pipeline with Parameters
        run: |
          set -e
          JENKINS_URL="http://10.176.27.188:8080/"
          JOB_NAME="ABot-SDCORE-CI-Pipeline"
          USERNAME="admin"
          TOKEN="${{ secrets.JENKINS_TOKEN }}"
          SERVER_IP_ENCODED=${{ github.event.inputs.server_ip }}
          PORT_ENCODED=${{ github.event.inputs.port }}
          BRANCH_NAME_ENCODED=${{ github.event.inputs.branch_name }}
          SMOKE_TEST_ENCODED=${{ github.event.inputs.smoke_test }}
          SANITY_TEST_ENCODED=${{ github.event.inputs.sanity_test }}
          
          TRIGGER_RESPONSE=$(curl -v -X POST -u $USERNAME:$TOKEN \
               "${JENKINS_URL}job/${JOB_NAME}/buildWithParameters?SERVER_IP=${SERVER_IP_ENCODED}&PORT=${PORT_ENCODED}&BRANCH_NAME=${BRANCH_NAME_ENCODED}&Smoke_Test=${SMOKE_TEST_ENCODED}&Sanity_Test=${SANITY_TEST_ENCODED}" \
                -i)
          echo "Full response from Jenkins: $TRIGGER_RESPONSE"
          QUEUE_URL=$(echo "$TRIGGER_RESPONSE" | grep -Fi Location | awk '{print $2}' | tr -d '\r')
          if [ -z "$QUEUE_URL" ]; then
            echo "Failed to trigger Jenkins job. Queue URL not found."
            exit 1
          fi
          echo "Triggered Jenkins job successfully. Queue URL: $QUEUE_URL"
          echo "queue_url=$QUEUE_URL" >> $GITHUB_ENV

     
          
      - name: Wait for Jenkins Job to Start and Retrieve Build Number
        id: fetch-build-number
        run: |
          set -e
          JENKINS_URL="http://10.176.27.188:8080/"
          JOB_NAME="ABot-SDCORE-CI-Pipeline"
          USERNAME="admin"
          TOKEN="${{ secrets.JENKINS_TOKEN }}"
          QUEUE_URL="${{ env.queue_url }}"
          echo "Polling Jenkins queue to fetch build number..."
          BUILD_NUMBER="null"

          for i in {1..30}; do
          # Use curl and grep to extract build number
            RESPONSE=$(curl -s -u $USERNAME:$TOKEN "${QUEUE_URL}api/json")
            BUILD_NUMBER=$(echo "$RESPONSE" | grep -o '"number":[0-9]*' | awk -F':' '{print $2}')
  
            if [ -n "$BUILD_NUMBER" ] && [ "$BUILD_NUMBER" != "null" ]; then
              echo "Build number: $BUILD_NUMBER"
              break
            fi
  
            echo "Waiting for build to be scheduled... Attempt: $i"
            sleep 5
           done

           if [ -z "$BUILD_NUMBER" ] || [ "$BUILD_NUMBER" == "null" ]; then
             echo "Failed to retrieve the build number from Jenkins queue after multiple attempts."
             exit 1
           fi

           echo "build_number=$BUILD_NUMBER" >> $GITHUB_ENV

      - name: Monitor Jenkins Job Progress and Fetch Build Information
        id: jenkins-status
        env:
          BUILD_NUMBER: "${{ env.build_number }}" # Pass the build number from a previous step
        run: |
          set -e
          JENKINS_URL="http://10.176.27.188:8080/"
          JOB_NAME="ABot-SDCORE-CI-Pipeline"
          USERNAME="admin"
          TOKEN="${{ secrets.JENKINS_TOKEN }}"
          echo "Checking the status of the Jenkins job..."
          STATUS="null"
          for i in {1..60}; do
            # Get build info using curl
            BUILD_INFO=$(curl -s -u $USERNAME:$TOKEN "$JENKINS_URL/job/$JOB_NAME/$BUILD_NUMBER/api/json")
            
            # Extract job status using grep and awk
            STATUS=$(echo $BUILD_INFO | grep -o '"result":"[^"]*' | awk -F':' '{print $2}' | tr -d '"')
            
            if [ "$STATUS" != "null" ]; then
              break
            fi
            
            echo "Waiting for build to complete... Attempt: $i"
            sleep 10
          done

          if [ "$STATUS" == "null" ]; then
            echo "Failed to fetch the status of the Jenkins job after multiple attempts."
            exit 1
          fi

          if [ "$STATUS" == "FAILURE" ]; then
            BUILD_LOG=$(curl -s -u $USERNAME:$TOKEN "$JENKINS_URL/job/$JOB_NAME/$BUILD_NUMBER/consoleText" | tail -n 50)
            echo "Build failed with error log: $BUILD_LOG"
          fi

          # Extract timestamp using grep and awk
          BUILD_TIMESTAMP=$(echo $BUILD_INFO | grep -o '"timestamp":[0-9]*' | awk -F':' '{print $2}')
          BUILD_DATE=$(date -d @"$(($BUILD_TIMESTAMP / 1000))" +'%Y-%m-%d %H:%M:%S' || date -r $(($BUILD_TIMESTAMP / 1000)) '+%Y-%m-%d %H:%M:%S')

          echo "Job Status: $STATUS"
          echo "Build Number: $BUILD_NUMBER"
          echo "Build Date: $BUILD_DATE"

          echo "status=$STATUS" >> $GITHUB_ENV
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "build_date=$BUILD_DATE" >> $GITHUB_ENV
