name: GHCR - Install SD-Core 5G

on:
  workflow_dispatch:
    inputs:
      server_ip:
        description: 'The server IP address'
        required: true
        default: '10.176.27.188'
      port:
        description: "The port to deploy the application on 8080"
        required: true
        default: "8080"
      branch_name:
        description: 'The branch name to use'
        required: true
        default: 'main'
      smoke_test:
        description: 'Run Smoke Test'
        required: true
        default: 'true'
        type: boolean
      sanity_test:
        description: 'Run Sanity Test'
        required: true
        default: 'true'
        type: boolean

jobs:
  install:
    runs-on: [self-hosted]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set Up Variables
        run: |
          echo "SERVER_IP=${{ github.event.inputs.server_ip }}" >> $GITHUB_ENV
          echo "PORT=${{ github.event.inputs.port }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${{ github.event.inputs.branch_name }}" >> $GITHUB_ENV
          echo "SMOKE_TEST=${{ github.event.inputs.smoke_test }}" >> $GITHUB_ENV
          echo "SANITY_TEST=${{ github.event.inputs.sanity_test }}" >> $GITHUB_ENV
      - name: Trigger Jenkins Parameterized Job
        run: |
          set -e
          JENKINS_URL="http://10.176.27.188:8080/"
          JOB_NAME="ABot-SDCORE-CI-Pipeline"
          USERNAME="admin"
          TOKEN="11836ad3b70cb3ab87b28836c59de4a3e7"
          
          # URL encode parameters
          SERVER_IP_ENCODED=$(echo $SERVER_IP |jq -s -R -r @uri)
          PORT_ENCODED=$(echo $PORT |jq -s -R -r @uri)
          BRANCH_NAME_ENCODED=$(echo $BRANCH_NAME |jq -s -R -r @uri)
          SMOKE_TEST_ENCODED=$(echo $SMOKE_TEST |jq -s -R -r @uri)
          SANITY_TEST_ENCODED=$(echo $SANITY_TEST |jq -s -R -r @uri)
          
          TRIGGER_RESPONSE=$(curl -v -X POST -u $USERNAME:$TOKEN \
               "${JENKINS_URL}job/${JOB_NAME}/buildWithParameters?SERVER_IP=${SERVER_IP_ENCODED}&PORT=${PORT_ENCODED}&BRANCH_NAME=${BRANCH_NAME_ENCODED}&Smoke_Test=${SMOKE_TEST_ENCODED}&Sanity_Test=${SANITY_TEST_ENCODED}" \
                -i)
          echo "Full response from Jenkins: $TRIGGER_RESPONSE"
          QUEUE_URL=$(echo "$TRIGGER_RESPONSE" | grep -Fi Location | awk '{print $2}' | tr -d '\r')
          if [ -z "$QUEUE_URL" ]; then
            echo "Failed to trigger Jenkins job. Queue URL not found."
            exit 1
          fi
          echo "Triggered Jenkins job. Queue URL: $QUEUE_URL"
          echo "queue_url=$QUEUE_URL" >> $GITHUB_ENV

       # Testing Jenkins Job Trigger
      - name: Testing jenkins jobs
        run: |
          set -e
          JENKINS_URL="http://10.176.27.188:8080/"
          JOB_NAME="ABot-SDCORE-CI-Pipeline"
          USERNAME="admin"
          TOKEN="11836ad3b70cb3ab87b28836c59de4a3e7"
          PARAMS="RUN_BASIC_ENV=true&RUN_FILE_OPS=false&RUN_NETWORK_TEST=false&RUN_BUILD_SIM=false"  # Example parameters
          TEST_URL="${JENKINS_URL}job/${JOB_NAME}/buildWithParameters?$PARAMS"
          TEST_RESPONSE=$(curl -v -X POST -u $USERNAME:$TOKEN "$TEST_URL" -i)
          HTTP_STATUS_TEST=$(echo "$TEST_RESPONSE" | head -n 1 | awk '{print $2}')
          echo "Testing job response status: $HTTP_STATUS_TEST"
          if [[ "$HTTP_STATUS_TEST" != "201" ]]; then
            echo "Error triggering testing job. HTTP Status: $HTTP_STATUS_TEST"
            exit 1
          fi
          echo "Testing job triggered successfully."
          
      - name: Wait for Build to Start and Fetch Build Number
        id: fetch-build-number
        run: |
          set -e
          JENKINS_URL="http://10.176.27.188:8080/"
          JOB_NAME="ABot-SDCORE-CI-Pipeline"
          USERNAME="admin"
          TOKEN="11836ad3b70cb3ab87b28836c59de4a3e7"
          QUEUE_URL="${{ env.queue_url }}"
          # Check if jq is installed
          if ! command -v jq &> /dev/null; then
           echo "jq is not installed. Installing jq..."
           sudo apt-get update && sudo apt-get install -y jq
          fi
          
          echo "Polling Jenkins queue to fetch build number..."
          BUILD_NUMBER="null"
          for i in {1..30}; do
            BUILD_NUMBER=$(curl -s -u $USERNAME:$TOKEN "${QUEUE_URL}api/json" | jq -r '.executable.number')
            if [ "$BUILD_NUMBER" != "null" ]; then
              echo "Build number: $BUILD_NUMBER"
              break
            fi
            echo "Waiting for build to be scheduled... Attempt: $i"
            sleep 5
          done

          if [ "$BUILD_NUMBER" == "null" ]; then
            echo "Failed to retrieve the build number from Jenkins queue after multiple attempts."
            exit 1
          fi

          echo "build_number=$BUILD_NUMBER" >> $GITHUB_ENV

      - name: Check Jenkins Job Status
        id: jenkins-status
        env:
          BUILD_NUMBER: "${{ env.build_number }}" # Pass the build number from a previous step
        run: |
         set -e
         JENKINS_URL="http://10.176.27.188:8080/"
         JOB_NAME="ABot-SDCORE-CI-Pipeline"
         USERNAME="admin"
         TOKEN="11836ad3b70cb3ab87b28836c59de4a3e7"
         echo "Checking the status of the Jenkins job..."
         STATUS="null"
         for i in {1..60}; do
           BUILD_INFO=$(curl -s -u $USERNAME:$TOKEN "$JENKINS_URL/job/$JOB_NAME/$BUILD_NUMBER/api/json")
           STATUS=$(echo $BUILD_INFO | jq -r '.result')
           if [ "$STATUS" != "null" ]; then
             break
           fi
           echo "Waiting for build to complete... Attempt: $i"
           sleep 10
         done

         if [ "$STATUS" == "null" ]; then
           echo "Failed to fetch the status of the Jenkins job after multiple attempts."
           exit 1
         fi

  
         if [ "$STATUS" == "FAILURE" ]; then
          BUILD_LOG=$(curl -s -u $USERNAME:$TOKEN "$JENKINS_URL/job/$JOB_NAME/$BUILD_NUMBER/consoleText" | tail -n 50)
          echo "Build failed with error log: $BUILD_LOG"
         fi

   
         BUILD_TIMESTAMP=$(echo $BUILD_INFO | jq -r '.timestamp')
         BUILD_DATE=$(date -d @"$(($BUILD_TIMESTAMP / 1000))" +'%Y-%m-%d %H:%M:%S' || date -r $(($BUILD_TIMESTAMP / 1000)) '+%Y-%m-%d %H:%M:%S')

         echo "Job Status: $STATUS"
         echo "Build Number: $BUILD_NUMBER"
         echo "Build Date: $BUILD_DATE"

    
         echo "status=$STATUS" >> $GITHUB_ENV
         echo "build_number=$BUILD_NUMBER" >> $GITHUB_ENV
         echo "build_date=$BUILD_DATE" >> $GITHUB_ENV
